# Python CircleCI 2.1 configuration file
version: 2.1
jobs:
  build:
    docker:
      - image: circleci/python:3.10

    working_directory: ~/repo

    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      # Step 3: run linter and tests
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            flake8 --exclude=venv* --statistics
            pytest -v --cov=calculator



# references - https://realpython.com/python-continuous-integration/#:~:text=CircleCI%20configuration%20reference

# version: Every config.yml starts with the CircleCI version number, used to issue warnings about breaking changes.
# jobs: Jobs represent a single execution of the build and are defined by a collection of steps. If you have only one job, it must be called build.
# build: As mentioned before, build is the name of your job. You can have multiple jobs, in which case they need to have unique names.
# docker: The steps of a job occur in an environment called an executor. The common executor in CircleCI is a Docker container. It is a cloud-hosted execution environment but other options exist, like a macOS environment.
# image: A Docker image is a file used to create a running Docker container. We are using an image that has Python 3.10 preinstalled.
# working_directory: Your repository has to be checked out somewhere on the build server. The working directory represents the file path where the repository will be stored.
# steps: This key marks the start of a list of steps to be performed by the build server.
# checkout: The first step the server needs to do is check the source code out to the working directory. This is performed by a special step called checkout.
# run: Executing command-line programs or commands is done inside the command key. The actual shell commands will be nested within.
# name: The CircleCI user interface shows you every build step in the form of an expandable section. The title of the section is taken from the value associated with the name key.
# command: This key represents the command to run via the shell. The | symbol specifices that what follows is a literal set of commands, one per line, exactly like youâ€™d see in a shell/bash script.
